{# templates/operation/_form_depot_script.html.twig #}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const depotContainer = document.getElementById('group-DEPOT');

        if (!depotContainer) {
            console.warn("Conteneur 'group-DEPOT' non trouvé. Le script de dépôt ne s'exécutera pas.");
            return;
        }

        const typeDepotSelect = document.getElementById('typeDepot'); // NOUVEAU
        const depotBancaireFields = document.getElementById('depotBancaireFields'); // NOUVEAU
        const compteBancaireAgenceSelect = document.getElementById('compteBancaireAgence'); // NOUVEAU
        const referenceBancaireInput = document.getElementById('referenceBancaire'); // NOUVEAU
        const dateValeurInput = document.getElementById('dateValeur'); // NOUVEAU

        const deviseApporteeSelect = document.getElementById('op-deviseApportee');
        const montantApporteInput = document.getElementById('op-montantApporte');
        const deviseCibleCompteSelect = document.getElementById('op-deviseCibleCompte');
        const montantCibleCompteInput = document.getElementById('op-montantCibleCompte');
        const tauxDepotInput = document.getElementById('op-tauxDepot');
        const feedbackDiv = document.getElementById('operation-feedback');
        const submitButton = document.getElementById('submit-operation');

        const profilClientSelect = document.getElementById('profilClient-select');

        const getRateUrl = depotContainer.dataset.getRateUrl;
        const checkBalanceUrl = depotContainer.dataset.checkBalanceUrl;

        let currentRateDepot = null;

        function debounce(func, delay) {
            let timeout;
            return function(...args) {
                const context = this;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), delay);
            };
        }

        // NOUVELLE FONCTION: Gérer la visibilité des champs selon le type de dépôt
        function toggleDepotFields() {
            const selectedType = typeDepotSelect.value;
            if (selectedType === 'bancaire') {
                depotBancaireFields.style.display = 'block';
                // Rendre les champs spécifiques au dépôt bancaire requis
                compteBancaireAgenceSelect.setAttribute('required', 'required');
                dateValeurInput.setAttribute('required', 'required');
                // Désactiver ou masquer les champs de taux et de solde caisse non pertinents
                tauxDepotInput.value = '1.0'; // Pas de conversion manuelle ici
                montantCibleCompteInput.value = montantApporteInput.value; // Par défaut, même montant
                montantCibleCompteInput.readOnly = true; // Empêcher la modification
                deviseCibleCompteSelect.disabled = true; // On force la devise cible à être la même que l'apportée pour le moment
                feedbackDiv.innerHTML = '<p class="text-muted mb-0 alert alert-info">Pour un dépôt bancaire, la devise cible du compte client doit correspondre à la devise apportée.</p>';

            } else {
                depotBancaireFields.style.display = 'none';
                // Retirer l'attribut required pour les champs bancaires
                compteBancaireAgenceSelect.removeAttribute('required');
                dateValeurInput.removeAttribute('required');
                // Réactiver les champs pour les dépôts classiques/conversion
                montantCibleCompteInput.readOnly = false;
                deviseCibleCompteSelect.disabled = false;
            }
            updateDepotDetails(); // Mettre à jour les détails après le changement de type
        }


        async function updateDepotDetails() {
            const selectedType = typeDepotSelect.value; // Récupérer le type de dépôt
            const deviseApporteeId = deviseApporteeSelect.value;
            const montantApporte = parseFloat(montantApporteInput.value);
            const deviseCibleCompteId = deviseCibleCompteSelect.value;
            const profilClientId = profilClientSelect ? profilClientSelect.value : null;

            const deviseApporteeCode = deviseApporteeSelect.options[deviseApporteeSelect.selectedIndex]?.dataset.code || '???';
            const deviseCibleCompteCode = deviseCibleCompteSelect.options[deviseCibleCompteSelect.selectedIndex]?.dataset.code || '???';

            // Validation de base pour tous les types de dépôt
            if (!profilClientId || !deviseApporteeId || !deviseCibleCompteId || isNaN(montantApporte) || montantApporte <= 0) {
                montantCibleCompteInput.value = '';
                tauxDepotInput.value = '';
                feedbackDiv.innerHTML = '<p class="text-muted mb-0 alert alert-warning">Veuillez sélectionner un profil client, les devises et entrer le montant apporté.</p>';
                submitButton.disabled = true;
                return;
            }

            // NOUVELLE VALIDATION SPÉCIFIQUE AU DÉPÔT BANCAIRE
            if (selectedType === 'bancaire') {
                const compteBancaireAgenceId = compteBancaireAgenceSelect.value;
                const dateValeur = dateValeurInput.value;

                if (!compteBancaireAgenceId || !dateValeur) {
                    feedbackDiv.innerHTML = '<p class="text-muted mb-0 alert alert-warning">Veuillez sélectionner le compte bancaire de l\'agence et la date de valeur.</p>';
                    submitButton.disabled = true;
                    return;
                }
                // Pour un dépôt bancaire, forcer deviseApportee == deviseCibleCompte
                if (deviseApporteeId !== deviseCibleCompteId) {
                    feedbackDiv.innerHTML = '<p class="text-muted mb-0 alert alert-danger">Pour un dépôt bancaire, la devise apportée et la devise cible doivent être identiques.</p>';
                    submitButton.disabled = true;
                    return;
                }
                montantCibleCompteInput.value = montantApporte.toFixed(2);
                tauxDepotInput.value = '1.000000';
                feedbackDiv.innerHTML = `<div class="alert alert-success"><i class="fas fa-check-circle me-1"></i>Dépôt bancaire de <strong>${montantApporte.toFixed(2)} ${deviseApporteeCode}</strong>.</div>`;
                submitButton.disabled = false; // Le solde de la caisse n'est pas un facteur bloquant ici
                return; // Fin de la fonction pour le cas bancaire
            }

            // Logique existante pour Dépôt Classique et Dépôt avec Conversion
            feedbackDiv.innerHTML = `<div class="text-info"><i class="fas fa-spinner fa-spin me-2"></i>Calcul en cours...</div>`;
            submitButton.disabled = true;

            let montantFinal = montantApporte;
            let tauxUtilise = 1;
            let isConversion = false;

            try {
                if (deviseApporteeId !== deviseCibleCompteId) {
                    isConversion = true;
                    feedbackDiv.innerHTML = `<div class="text-info"><i class="fas fa-spinner fa-spin me-2"></i>Recherche du taux de conversion...</div>`;

                    const rateResponse = await fetch(getRateUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
                        body: JSON.stringify({ deviseSource: deviseApporteeId, deviseCible: deviseCibleCompteId })
                    });

                    if (!rateResponse.ok) {
                        throw new Error(`Erreur HTTP ${rateResponse.status} lors de la récupération du taux.`);
                    }

                    const rateData = await rateResponse.json();

                    if (!rateData.success) {
                        feedbackDiv.innerHTML = `<div class="alert alert-danger"><i class="fas fa-times-circle me-2"></i>${rateData.message}</div>`;
                        return;
                    }
                    tauxUtilise = rateData.taux;
                    montantFinal = montantApporte * tauxUtilise;
                    currentRateDepot = tauxUtilise;
                } else {
                    currentRateDepot = 1;
                }

                montantCibleCompteInput.value = montantFinal.toFixed(2);
                tauxDepotInput.value = tauxUtilise.toFixed(6);

                let feedbackMsg = '';
                if (isConversion) {
                    feedbackMsg = `Taux de conversion appliqué : <strong>1 ${deviseApporteeCode} = ${tauxUtilise.toFixed(4)} ${deviseCibleCompteCode}</strong>.`;
                    feedbackMsg += `<br>Le client sera crédité de <strong>${montantFinal.toFixed(2)} ${deviseCibleCompteCode}</strong>.`;
                } else {
                    feedbackMsg = `Le client sera crédité de <strong>${montantFinal.toFixed(2)} ${deviseCibleCompteCode}</strong>.`;
                }
                feedbackDiv.innerHTML = `<div class="alert alert-info">${feedbackMsg}</div>`;

                // SUPPRIMÉ : Vérification du solde caisse pour le dépôt classique ou conversion
                        submitButton.disabled = false;
                feedbackDiv.innerHTML += `<div class="alert alert-success mt-1 p-2"><i class="fas fa-check-circle me-1"></i>Dépôt possible.</div>`;

            } catch (error) {
                console.error("Erreur dans updateDepotDetails:", error);
                feedbackDiv.innerHTML = `<div class="alert alert-danger"><i class="fas fa-exclamation-circle me-2"></i>Erreur: ${error.message}</div>`;
                submitButton.disabled = true;
            }
        }

        const debouncedDepotUpdate = debounce(updateDepotDetails, 500);

        // NOUVEAU: Écouteur pour le changement du type de dépôt
        typeDepotSelect.addEventListener('change', toggleDepotFields);

        deviseApporteeSelect.addEventListener('change', updateDepotDetails);
        montantApporteInput.addEventListener('input', debouncedDepotUpdate);
        deviseCibleCompteSelect.addEventListener('change', updateDepotDetails);

        // NOUVEAU: Écouteurs pour les champs de dépôt bancaire
        compteBancaireAgenceSelect.addEventListener('change', updateDepotDetails);
        referenceBancaireInput.addEventListener('input', updateDepotDetails);
        dateValeurInput.addEventListener('change', updateDepotDetails);


        window.triggerDepotUpdate = updateDepotDetails;

        if (profilClientSelect) {
            profilClientSelect.addEventListener('change', updateDepotDetails);
        }

        // Appel initial pour gérer la visibilité et la validation au chargement
        setTimeout(() => {
            toggleDepotFields(); // Appelle d'abord pour configurer les champs
            updateDepotDetails(); // Puis pour valider
        }, 50);
    });
</script>
